inside folder 'pricewise':
npx create-next-app@latest ./


Install VSC extensions: ES7+, Tailwind Intellisense

in app/page.tsx:
clean all contents
rafce
const Home = () => {
  return <div>Home</div>;
};

export default Home;


In app/globals.css:
Replace it with custom Tailwind definitions (like in globals.css  https://gist.github.com/adrianhajdin/686326bc20e24810128637a9053c49a0)

In app/tailwind.config.ts: 
Replace it with custom Tailwind definitions (like in tailwind.config.ts  https://gist.github.com/adrianhajdin/686326bc20e24810128637a9053c49a0)

In app/layout.tsx:
add another font 'Space_Grotesk'
<main className="max-w-10xl mx-auto">

Add folder root: components  (each components looks like:  Navbar.tsx)

In app/favicon.ico:  bring your own (like: creating it online)

Attention to the structure:
app/public/assets/icons  (should be SVG files)
app/public/assets/images (should be SVG files)


In Navbar.tsx (essential for WCAG & SEO):
 return <header>
    <nav>
          
    </nav>
  </header>;
  
In app/page.tsx:
const Home = () => {
  return <>
  <section>
    
  </section>
  </>;
};


 const handleSubmit = async (event:FormEvent<HTMLFormElement>) => {};    //Submit button clicked
 
 
 * Server actions:  add file root/lib/actions/index.ts //functions should be short & implement complicated logic inside lib/[functionality]/index.ts
   

* BrightData (Proxies & Scraping Infrastructure):
 My Proxies => Web Unblocker => Add
 Add file root/.env
 
Object.keys(lior)  //take the object lior & make a list of its 'key' value 
Object.values(lior)  //take the object lior & make a list of its 'value' value

add file root/types/index.ts
add file lib/actions/mongoose.ts
add lib/models/product.model.ts  

interface Props {
  product: Product;  //Product is a custom type
}
const ProductCard = ({ product }: Props) 

app/api/cron/route.ts   //defining periodic operations

//loops run in parallel & when the last finished, the result is in updatedProduct
const updatedProducts = await Promise.all(products.map(async(currentProduct)=>(
      
    )));

//userEmails gets all user emails	
const userEmails = updatedProduct.users.map(
            (user: any) => user.email
          );

//copying members from currentProduct.priceHistory & adding a new member
const updatedPriceHistory = [
          ...currentProduct.priceHistory,
          {
            price: scrapedProduct.currentPrice,
          },
        ];	

//copying fileds from object scrapedProduct & adding a new field
 const product = {
    ...scrapedProduct,
    priceHistory: updatedPriceHistory, 
    };	


npm run build  //if it works, it should work on Vercel
In vercel settings:  In "Framework Preset", select Next.js.
In app/api/cron/route.ts   //view the structure & settings
Define a cron job on Vercel
Imporatant: cron jobs run once a day  => https://cron-job.org/en/  =>
Create Cronjob  (url is the one you get on Vercel when clicking 'Visit' + /api/cron)	
  
 
